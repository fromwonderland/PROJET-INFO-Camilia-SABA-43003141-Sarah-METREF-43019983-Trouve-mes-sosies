import tkinter as tk
from tkinter import ttk, filedialog, messagebox, colorchooser
import webbrowser
from PIL import Image, ImageTk
import requests
from io import BytesIO
from tkinter import filedialog
import os
from deepface import DeepFace
import numpy as np
import threading
import time
from datetime import datetime
from fpdf import FPDF
import cv2
import json

# Fonction pour ouvrir le lien YouTube dans le navigateur
def open_help_video():
    webbrowser.open("https://www.youtube.com/watch?v=_S-snes6PPQ", new=2)  # "new=2" ouvre dans un nouvel onglet si possible

# Fonction pour configurer la fen√™tre principale
def create_window():
    global root
    # Cr√©er la fen√™tre principale
    root = tk.Tk()

    # D√©finir le titre de la fen√™tre
    root.title("ü©∑Trouve mes sosiesü©∑")

    # Mettre la fen√™tre en presque plein √©cran
    root.attributes("-fullscreen", True)

    # D√©finir le fond de la fen√™tre en noir
    root.config(bg=bg_color)

    # Cr√©er un bouton "ü§î Aide" dans l'angle sup√©rieur gauche avec taille de police 23px
    help_button = tk.Button(root, text="ü§î Aide", font=("Times New Roman", 23), fg=text_color, bg=button_color, command=open_help_video)
    help_button.place(x=10, y=10)  # Positionner le bouton en haut √† gauche (10px de marge)

    # Ajouter un bouton "‚ùå" dans l'angle sup√©rieur droit pour fermer la fen√™tre avec taille de police 23px
    close_button = tk.Button(root, text="‚ùå", font=("Times New Roman", 23), fg=text_color, bg=button_color, command=lambda: open_quit_confirmation(root))
    close_button.place(x=root.winfo_screenwidth() - 10, y=10, anchor='ne')  # Positionner le bouton en haut √† droite avec une marge de 10px

    # Ajouter un label au centre, l√©g√®rement vers le haut
    label = tk.Label(root, text="ü©∑Entre ton nom et clique sur la f√©e pour trouver ton sosieü©∑", font=("Times New Roman", 24), fg=text_color, bg=bg_color)
    label.pack(pady=(100, 20))  # 100px de marge en haut et 20px de marge en bas

    # Cr√©er un cadre pour l'entr√©e de texte de 25 caract√®res
    frame2 = tk.Frame(root, bg=entry_frame_color, bd=1)  # Frame avec bordure #ff82e6, plus fine (bd=1)
    frame2.pack(pady=20)

    # Ajouter l'entr√©e de texte de 25 caract√®res dans le cadre, avec une police en gras et texte centr√©
    entry2 = tk.Entry(frame2, font=("Times New Roman", 20, "bold"), fg=text_color, bg=entry_bg_color, bd=2, relief="solid", width=25, justify='center')
    entry2.pack(padx=10, pady=5)  # Ajouter un peu de marge √† l'int√©rieur du cadre

    # Cr√©er un bouton "‚≠ê" √† droite de l'entr√©e de texte avec taille de police 30px
    def on_star_click():
        # Si l'entr√©e de texte est vide, changer la couleur du label
        if not entry2.get().strip():  # Si le texte est vide
            label.config(fg="#71CC51")
        else:
            # Si l'entr√©e de texte contient du texte, fermer la fen√™tre actuelle et ouvrir la nouvelle page
            user_name = entry2.get().strip()
            root.destroy()  # Fermer la fen√™tre actuelle
            create_etape2_window(user_name)  # Cr√©er la nouvelle fen√™tre "Etape 2" avec le nom de l'utilisateur

    star_button = tk.Button(root, text="‚≠ê", font=("Times New Roman", 30), fg=text_color, bg=button_color, command=on_star_click)
    star_button.pack(pady=10)  # Le bouton est centr√© √©galement

    # Ajouter un bouton "ü¶ãPersonnaliser" √† gauche du bouton "‚ùå"
    personalise_button = tk.Button(root, text="ü¶ãPersonnaliser", font=("Times New Roman", 23), fg=text_color, bg=button_color, command=open_customization_window)
    personalise_button.place(x=root.winfo_screenwidth() - 85, y=10, anchor='ne')  # Positionner √† gauche du bouton "‚ùå"

    # Lancer la boucle principale de l'application
    root.mainloop()

# Chemins et configurations
faces_folder = "C:\\Users\\camil\\Music\\Visages"  # Dossier contenant les images

def generate_embeddings_for_folder(new_window):
    """
    Calcule les embeddings pour toutes les images dans le dossier et les renvoie dans un dictionnaire.
    """
    print("G√©n√©ration des embeddings pour les images du dossier...")

    embeddings = {}
    total_files = len(os.listdir(faces_folder))
    processed_files = 0

    for file_name in os.listdir(faces_folder):
        if file_name.endswith(".jpg") or file_name.endswith(".png"):
            image_path = os.path.join(faces_folder, file_name)
            print(f"Traitement de {file_name}...")
            try:
                # Calcul des embeddings pour l'image
                embedding = DeepFace.represent(img_path=image_path, model_name="VGG-Face")[0]["embedding"]
                embeddings[file_name] = embedding
            except Exception as e:
                print(f"Erreur avec {file_name}: {e}")

        processed_files += 1
        progress_percentage = (processed_files / total_files) * 100
        if new_window.winfo_exists():
            progress_var.set(progress_percentage)
            progress_label.config(text=f"Chargement... {int(progress_percentage)}%")

    return embeddings

def find_sosie(user_image, new_window):
    global embeddings, search_thread_active
    # G√©n√©rer les embeddings pour les images du dossier
    embeddings = generate_embeddings_for_folder(new_window)

    # Calculer l'embedding pour l'image utilisateur
    print("Calcul des embeddings pour l'image utilisateur...")
    try:
        user_embedding = DeepFace.represent(img_path=user_image, model_name="VGG-Face")[0]["embedding"]
    except Exception as e:
        print(f"Erreur lors du traitement de l'image utilisateur : {e}")
        return

    # Trouver le sosie en comparant les embeddings
    best_match = None
    best_distance = float("inf")
    print("Recherche du sosie...")
    distances = []
    max_distance = 0  # Initialiser max_distance √† 0

    for file_name, db_embedding in embeddings.items():
        if not search_thread_active:
            return
        # Calculer la distance cosinus entre l'embedding de l'utilisateur et celui de la base de donn√©es
        distance = np.linalg.norm(np.array(user_embedding) - np.array(db_embedding))
        print(f"Comparaison avec {file_name} : distance = {distance}")
        distances.append((file_name, distance))

        if distance < best_distance:
            best_distance = distance
            best_match = file_name

        # Mettre √† jour max_distance
        if distance > max_distance:
            max_distance = distance

    if best_match:
        print(f"Le sosie le plus proche est {best_match} avec une distance de {best_distance}")
    else:
        print("Aucun sosie trouv√©.")

    # Trier les distances par ordre d√©croissant
    distances.sort(key=lambda x: x[1])

    return best_match, distances, best_distance, max_distance

# Fonction pour ouvrir la fen√™tre de confirmation de quitter
def open_quit_confirmation(etape2_window):
    # Cr√©er une nouvelle fen√™tre pour la confirmation
    confirmation_window = tk.Toplevel(etape2_window)
    confirmation_window.title("ü©∑Quitter?ü©∑")

    # Centrer la fen√™tre de confirmation
    screen_width = confirmation_window.winfo_screenwidth()
    screen_height = confirmation_window.winfo_screenheight()
    window_width = 400
    window_height = 200
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    confirmation_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    confirmation_window.config(bg=bg_color)

    # Ajouter un label avec la question
    label = tk.Label(confirmation_window, text="ü©∑Souhaites-tu quitter l'app?ü©∑", font=("Times New Roman", 16), fg=text_color, bg=bg_color)
    label.pack(pady=20)

    # Cr√©er un cadre pour les boutons
    button_frame = tk.Frame(confirmation_window, bg=bg_color)
    button_frame.pack(pady=10)

    # Cr√©er les boutons "ü©∑ouiü©∑" et "ü©∑nonü©∑"
    def quit_app():
        confirmation_window.destroy()  # Fermer la fen√™tre de confirmation
        etape2_window.destroy()  # Fermer la fen√™tre "Etape 2"

    yes_button = tk.Button(button_frame, text="ü©∑ouiü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=quit_app)
    yes_button.pack(side=tk.LEFT, padx=10)

    no_button = tk.Button(button_frame, text="ü©∑nonü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=confirmation_window.destroy)
    no_button.pack(side=tk.RIGHT, padx=10)

# Fonction pour ouvrir la fen√™tre "Historique"
def open_history_window():
    history_window = tk.Toplevel()
    history_window.title("ü©∑Historiqueü©∑")

    # Centrer la fen√™tre "Historique"
    screen_width = history_window.winfo_screenwidth()
    screen_height = history_window.winfo_screenheight()
    window_width = 600
    window_height = 450
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    history_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    history_window.config(bg=bg_color)

    # Ajouter un label pour l'historique
    history_label = tk.Label(history_window, text="ü©∑Historique de tes sosiesü©∑", font=("Times New Roman", 20), fg=text_color, bg=bg_color)
    history_label.pack(pady=20)

    # Cr√©er un cadre pour contenir le Canvas et la Scrollbar
    frame = tk.Frame(history_window, bg=bg_color)
    frame.pack(fill=tk.BOTH, expand=1, pady=10)

    # Cr√©er un Canvas pour contenir les widgets
    canvas = tk.Canvas(frame, bg=bg_color, highlightthickness=0)
    canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)

    # Ajouter une barre de d√©filement verticale au Canvas
    scrollbar = tk.Scrollbar(frame, orient=tk.VERTICAL, command=canvas.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Configurer le Canvas pour qu'il puisse faire d√©filer les widgets
    canvas.configure(yscrollcommand=scrollbar.set)
    canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

    # Cr√©er un cadre pour l'historique
    history_frame = tk.Frame(canvas, bg=bg_color)
    canvas.create_window((0, 0), window=history_frame, anchor='nw')

    # Ajouter l'historique √† la fen√™tre
    for entry in history:
        entry_label = tk.Label(history_frame, text=entry, font=("Times New Roman", 16), fg=text_color, bg=bg_color)
        entry_label.pack(anchor='w')

    # Assurer que le Canvas s'√©tend correctement
    history_window.update_idletasks()
    canvas.config(scrollregion=canvas.bbox("all"))

    # Ajouter un bouton pour effacer l'historique dans history_window
    clear_button = tk.Button(history_window, text="ü©∑Effacer mon historiqueü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=lambda: open_clear_confirmation(history_window, history_frame))
    clear_button.pack(pady=10)

# Fonction pour ouvrir la fen√™tre de confirmation pour effacer l'historique
def open_clear_confirmation(history_window, history_frame):
    confirmation_window = tk.Toplevel(history_window)
    confirmation_window.title("ü©∑Effacer l'historique des sosies?ü©∑")

    # Centrer la fen√™tre de confirmation
    screen_width = confirmation_window.winfo_screenwidth()
    screen_height = confirmation_window.winfo_screenheight()
    window_width = 400
    window_height = 200
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    confirmation_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    confirmation_window.config(bg=bg_color)

    # Ajouter un label avec la question
    label = tk.Label(confirmation_window, text="ü©∑Souhaites-tu effacer l'historique de tes sosies?ü©∑", font=("Times New Roman", 16), fg=text_color, bg=bg_color)
    label.pack(pady=20)

    # Cr√©er un cadre pour les boutons
    button_frame = tk.Frame(confirmation_window, bg=bg_color)
    button_frame.pack(pady=10)

    # Cr√©er les boutons "ü©∑ouiü©∑" et "ü©∑nonü©∑"
    def clear_history():
        global history
        history = []
        for widget in history_frame.winfo_children():
            widget.destroy()
        confirmation_window.destroy()
        save_history()

    yes_button = tk.Button(button_frame, text="ü©∑ouiü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=clear_history)
    yes_button.pack(side=tk.LEFT, padx=10)

    no_button = tk.Button(button_frame, text="ü©∑nonü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=confirmation_window.destroy)
    no_button.pack(side=tk.RIGHT, padx=10)

# Fonction pour ouvrir la fen√™tre "Analyse des sosies possibles"
def open_analysis_window(distances, best_distance):
    analysis_window = tk.Toplevel()
    analysis_window.title("ü©∑Analyse des sosies possiblesü©∑")

    # Centrer la fen√™tre "Analyse des sosies possibles"
    screen_width = analysis_window.winfo_screenwidth()
    screen_height = analysis_window.winfo_screenheight()
    window_width = 670
    window_height = 400
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    analysis_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    analysis_window.config(bg=bg_color)

    # Cr√©er un Canvas pour contenir les widgets
    canvas = tk.Canvas(analysis_window, bg=bg_color)
    canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)

    # Ajouter une barre de d√©filement verticale au Canvas
    scrollbar = tk.Scrollbar(analysis_window, orient=tk.VERTICAL, command=canvas.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Configurer le Canvas pour qu'il puisse faire d√©filer les widgets
    canvas.configure(yscrollcommand=scrollbar.set)
    canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

    # Cr√©er un cadre pour l'analyse
    analysis_frame = tk.Frame(canvas, bg=bg_color)
    canvas.create_window((0, 0), window=analysis_frame, anchor='nw')

    # Ajouter un label pour l'analyse
    analysis_label = tk.Label(analysis_frame, text="ü©∑Sosies possibles et vos pourcentages de ressemblanceü©∑", font=("Times New Roman", 20), fg=text_color, bg=bg_color)
    analysis_label.pack(pady=20)

    # Ajouter les sosies possibles avec leurs pourcentages de ressemblance
    max_distance = max(distance for _, distance in distances)
    for file_name, distance in distances:
        similarity_percentage = (1 - distance / max_distance) * 100
        entry_label = tk.Label(analysis_frame, text=f"    {file_name.split('.')[0]} : {similarity_percentage:.2f}% de ressemblance", font=("Times New Roman", 16), fg=text_color, bg=bg_color)
        entry_label.pack(anchor='w')

# Fonction pour g√©n√©rer le PDF
def generate_pdf(user_image_path, sosie_image_path):
    if not user_image_path or not sosie_image_path:
        messagebox.showerror("Erreur", "Veuillez charger les deux images avant de g√©n√©rer le PDF.")
        return

    pdf = FPDF(orientation='L', unit='mm', format='A4')  # Format paysage
    pdf.add_page()

    page_width = 297  # Largeur A4 en mm (format paysage)
    page_height = 210  # Hauteur A4 en mm (format paysage)

    try:
        # Ajouter une image de fond
        background_url = "https://i.pinimg.com/736x/3d/1a/ca/3d1aca62e84905faf872b0a36e5d3dd9.jpg"
        response = requests.get(background_url)
        background_image = Image.open(BytesIO(response.content))
        background_path = os.path.join(os.getcwd(), "background.jpg")
        background_image.save(background_path)

        pdf.image(background_path, x=0, y=0, w=page_width, h=page_height)

        # D√©finir la taille par d√©faut des images dans le PDF souvenir
        image_width_mm = 120  # largeur en mm
        image_height_mm = 130  # hauteur en mm

        # Calculer les positions pour centrer les images horizontalement et verticalement
        left_x = (page_width / 4) - (image_width_mm / 2)
        right_x = (3 * page_width / 4) - (image_width_mm / 2)

        # Ajuster la position verticale en baissant un peu les images
        left_y = (page_height / 2) - (image_height_mm / 2) + 10  # Petit d√©calage vertical
        right_y = (page_height / 2) - (image_height_mm / 2) + 10  # M√™me pour l'autre image

        # Ajouter les images avec la taille d√©finie (elles seront maintenant beaucoup plus grandes)
        pdf.image(user_image_path, x=left_x, y=left_y, w=image_width_mm, h=image_height_mm)
        pdf.image(sosie_image_path, x=right_x, y=right_y, w=image_width_mm, h=image_height_mm)

        # Obtenir la date et l'heure actuelles
        now = datetime.now()
        date_str = now.strftime("%Y-%m-%d %H-%M-%S")

        # Sauvegarder le fichier PDF
        output_path = os.path.join(os.getcwd(), f"Trouve mon sosie {date_str}.pdf")
        pdf.output(output_path)

        # V√©rifier si le fichier a √©t√© cr√©√©
        if os.path.exists(output_path):
            # Cr√©er une fen√™tre de notification
            notification_window = tk.Toplevel()
            notification_window.title("ü©∑Souvenir t√©l√©charg√© avec succ√®sü©∑")

            # Centrer la fen√™tre de notification
            screen_width = notification_window.winfo_screenwidth()
            screen_height = notification_window.winfo_screenheight()
            window_width = 400
            window_height = 200
            x = (screen_width - window_width) // 2
            y = (screen_height - window_height) // 2
            notification_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

            # D√©finir le fond de la fen√™tre en noir
            notification_window.config(bg=bg_color)

            # Ajouter un label avec le message de succ√®s
            success_label = tk.Label(notification_window, text=f"üë©‚Äçü¶∞Ton souvenir a √©t√© rang√© dans le r√©pertoire courant :\n{output_path}üë©üèΩ‚Äçü¶±", font=("Times New Roman", 14), fg=text_color, bg=bg_color, wraplength=350)
            success_label.pack(pady=20)

            # Ajouter un bouton pour acc√©der au fichier
            def open_file_location():
                # Ouvrir le r√©pertoire contenant le fichier
                os.startfile(os.path.dirname(output_path))
                # Ouvrir le fichier PDF
                webbrowser.open(output_path)
                # Fermer la fen√™tre de notification
                notification_window.destroy()

            access_button = tk.Button(notification_window, text="ü©∑Trouver mon souvenirü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=open_file_location)
            access_button.pack(pady=10)

        else:
            messagebox.showerror("Erreur", "Le fichier PDF n'a pas pu √™tre cr√©√©.")
    except Exception as e:
        messagebox.showerror("Erreur", f"Une erreur s'est produite lors de la g√©n√©ration du PDF : {str(e)}")

# Modification de la fonction create_etape2_window
def create_etape2_window(user_name):
    global history, search_thread_active, distances

    # Cr√©er la nouvelle fen√™tre "Etape 2"
    new_window = tk.Tk()
    new_window.title("ü©∑Etape 2ü©∑")

    # Mettre la fen√™tre en plein √©cran
    new_window.attributes("-fullscreen", True)

    # D√©finir le fond de la fen√™tre en noir
    new_window.config(bg=bg_color)

    # Ajouter un bouton "‚ùå" dans l'angle sup√©rieur droit
    close_button = tk.Button(new_window, text="‚ùå", font=("Times New Roman", 23), fg=text_color, bg=button_color, command=lambda: open_quit_confirmation(new_window))
    close_button.place(x=new_window.winfo_screenwidth() - 10, y=10, anchor='ne')  # Positionner dans l'angle sup√©rieur droit

    # Ajouter un bouton "üìú" √† gauche du bouton "‚ùå"
    history_button = tk.Button(new_window, text="üìúHistorique", font=("Times New Roman", 23), fg=text_color, bg=button_color, command=open_history_window)
    history_button.place(x=new_window.winfo_screenwidth() - 90, y=10, anchor='ne')  # Positionner √† gauche du bouton "‚ùå"

    # Cr√©er un cadre pour les boutons "Aide" et "Accueil"
    button_frame = tk.Frame(new_window, bg=bg_color)
    button_frame.place(x=10, y=10)  # Positionner le cadre en haut √† gauche avec une marge de 10px

    # Cr√©er un bouton "üßô Aide" dans le cadre avec taille de police 23px
    help_button = tk.Button(button_frame, text="üßô Aide", font=("Times New Roman", 23), fg=text_color, bg=button_color, command=open_help_video)
    help_button.pack(side=tk.LEFT, padx=5)  # Positionner le bouton √† gauche avec une marge de 5px

    # Cr√©er un bouton "üè† Accueil" dans le cadre avec taille de police 23px
    home_button = tk.Button(button_frame, text="üè† Accueil", font=("Times New Roman", 23), fg=text_color, bg=button_color, command=lambda: open_home_confirmation(new_window))
    home_button.pack(side=tk.LEFT, padx=5)  # Positionner le bouton √† gauche avec une marge de 5px

    # Ajouter un label personnalis√© au centre, l√©g√®rement vers le haut
    welcome_label = tk.Label(new_window, text=f"üë©‚Äçü¶∞üë©üèΩ‚Äçü¶±Bienvenue {user_name}, charge/prends une photo pour trouver ton sosieüë©‚Äçü¶∞üë©üèΩ‚Äçü¶±", font=("Times New Roman", 24), fg=text_color, bg=bg_color)
    welcome_label.pack(pady=(100, 20))  # 100px de marge en haut et 20px de marge en bas

    # Cr√©er un label pour afficher l'image
    img_label = tk.Label(new_window, bg=bg_color)
    img_label.pack(pady=20)  # Ajouter un peu de marge sous le bouton

    # Cr√©er un cadre pour les boutons "Charger une photo" et "Valider ma photo"
    button_frame2 = tk.Frame(new_window, bg=bg_color)
    button_frame2.pack(pady=20)  # Ajouter un peu de marge sous le bouton

    # Cr√©er un bouton pour valider la photo
    validate_button = tk.Button(button_frame2, text="ü©∑Valider ma photoü©∑", font=("Times New Roman", 20), fg=text_color, bg=button_color)

    # Chemin de l'image utilisateur
    user_image_path = None

    # Fonction pour charger une image depuis le PC
    def load_image():
        nonlocal user_image_path
        # Ouvrir la bo√Æte de dialogue pour s√©lectionner une image
        file_path = filedialog.askopenfilename(filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp *.gif")])
        if file_path:
            # Charger l'image s√©lectionn√©e
            image = Image.open(file_path)

            # Redimensionner l'image pour qu'elle tienne dans la fen√™tre tout en conservant les proportions
            max_size = 400
            image.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)

            # Convertir l'image pour Tkinter
            photo = ImageTk.PhotoImage(image)

            # Mettre √† jour le label avec la nouvelle image
            img_label.config(image=photo)
            img_label.photo = photo  # Garder une r√©f√©rence de l'image pour √©viter qu'elle soit d√©truite

            # Afficher le bouton de validation
            validate_button.pack(side=tk.RIGHT, padx=10)  # Ajouter un peu de marge √† droite du bouton

            # Mettre √† jour le chemin de l'image utilisateur
            user_image_path = file_path

    # Cr√©er un bouton pour charger une image
    load_button = tk.Button(button_frame2, text="ü©∑Charger une photoü©∑", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=load_image)
    load_button.pack(side=tk.LEFT, padx=10)  # Ajouter un peu de marge √† gauche du bouton

    # Fonction pour d√©marrer la webcam
    def start_webcam():
        nonlocal user_image_path
        # Ouvrir la webcam
        cap = cv2.VideoCapture(0)

        # V√©rifier si la webcam est ouverte
        if not cap.isOpened():
            print("Erreur : Impossible d'ouvrir la webcam")
            return

        # Cr√©er une nouvelle fen√™tre pour afficher le flux vid√©o
        webcam_window = tk.Toplevel(new_window)
        webcam_window.title("ü©∑Webcam sayyy cheeeseü©∑")

        # Cr√©er un label pour afficher le flux vid√©o
        webcam_label = tk.Label(webcam_window)
        webcam_label.pack()

        # Fonction pour capturer l'image
        def capture_image():
            nonlocal user_image_path
            # Lire une image depuis la webcam
            ret, frame = cap.read()

            # V√©rifier si l'image a √©t√© lue correctement
            if not ret:
                print("Erreur : Impossible de lire l'image depuis la webcam")
                return

            # Convertir l'image de BGR (OpenCV) √† RGB (PIL)
            image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Convertir l'image en objet PIL
            image = Image.fromarray(image)

            # Redimensionner l'image pour qu'elle tienne dans la fen√™tre tout en conservant les proportions
            max_size = 400
            image.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)

            # Convertir l'image pour Tkinter
            photo = ImageTk.PhotoImage(image)

            # Mettre √† jour le label avec la nouvelle image
            img_label.config(image=photo)
            img_label.photo = photo  # Garder une r√©f√©rence de l'image pour √©viter qu'elle soit d√©truite

            # Afficher le bouton de validation
            validate_button.pack(side=tk.RIGHT, padx=10)  # Ajouter un peu de marge √† droite du bouton

            # Sauvegarder l'image temporairement pour l'analyse
            temp_image_path = "temp_image.jpg"
            image.save(temp_image_path)
            user_image_path = temp_image_path

            # Fermer la fen√™tre de la webcam
            webcam_window.destroy()

        # Cr√©er un bouton pour capturer l'image
        capture_button = tk.Button(webcam_window, text="ü©∑Prendre la photoü©∑", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=capture_image)
        capture_button.pack(pady=10)

        # Fonction pour mettre √† jour le flux vid√©o
        def update_webcam():
            # Lire une image depuis la webcam
            ret, frame = cap.read()

            # V√©rifier si l'image a √©t√© lue correctement
            if not ret:
                print("Erreur : Impossible de lire l'image depuis la webcam")
                return

            # Convertir l'image de BGR (OpenCV) √† RGB (PIL)
            image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Convertir l'image en objet PIL
            image = Image.fromarray(image)

            # Convertir l'image pour Tkinter
            photo = ImageTk.PhotoImage(image)

            # Mettre √† jour le label avec la nouvelle image
            webcam_label.config(image=photo)
            webcam_label.photo = photo  # Garder une r√©f√©rence de l'image pour √©viter qu'elle soit d√©truite

            # Appeler la fonction de mise √† jour apr√®s 10 ms
            webcam_window.after(10, update_webcam)

        # D√©marrer la mise √† jour du flux vid√©o
        update_webcam()

    # Cr√©er un bouton pour d√©marrer la webcam
    start_webcam_button = tk.Button(button_frame2, text="ü©∑Prendre une photoü©∑", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=start_webcam)
    start_webcam_button.pack(side=tk.LEFT, padx=10)  # Ajouter un peu de marge √† gauche du bouton

    # Fonction pour valider la photo
    def validate_photo():
        nonlocal user_image_path
        if user_image_path:
            # Masquer les boutons de chargement et de validation
            load_button.pack_forget()
            validate_button.pack_forget()
            start_webcam_button.pack_forget()

            # D√©placer l'image initialement charg√©e vers la gauche
            img_label.place(x=50, y=200)

            # Ajouter le nom de l'image charg√©e au-dessus de l'image
            img_name_label = tk.Label(new_window, text=os.path.basename(user_image_path), font=("Times New Roman", 20), fg=text_color, bg=bg_color)
            img_name_label.place(x=50, y=160)
            # Ajouter un texte "Chargement..."
            global progress_label
            progress_label = tk.Label(new_window, text="ü©∑Chargement... 0%ü©∑", font=("Times New Roman", 20), fg=text_color, bg=bg_color)
            progress_label.place(x=new_window.winfo_screenwidth() // 2 + 100, y=250)

            # Ajouter une barre de progression (Progressbar) sous le texte "Chargement..."
            global progress_var
            progress_var = tk.DoubleVar()
            progress = ttk.Progressbar(new_window, orient="horizontal", length=400, mode="determinate", variable=progress_var)
            progress.place(x=new_window.winfo_screenwidth() // 2 + 100, y=300)
            progress.start()  # D√©marrer l'animation de la barre

            # Ajouter un bouton "Annuler"
            cancel_button = tk.Button(new_window, text="ü©∑Annulerü©∑", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=open_cancel_confirmation)
            cancel_button.place(x=new_window.winfo_screenwidth() // 2 + 100, y=350)

            # Lancer la recherche de sosie dans un thread s√©par√©
            def search_sosie():
                global search_thread_active, best_distance
                search_thread_active = True
                best_match, distances, best_distance, max_distance = find_sosie(user_image_path, new_window)
                if search_thread_active and best_match:
                    # Arr√™ter la barre de progression
                    progress.stop()
                    # Mettre √† jour le texte de la barre de progression
                    progress_label.config(text="ü©∑Chargement termin√©ü©∑")

                    # Charger l'image du sosie
                    sosie_image_path = os.path.join(faces_folder, best_match)
                    sosie_image = Image.open(sosie_image_path)

                    # Redimensionner l'image pour qu'elle tienne dans la fen√™tre tout en conservant les proportions
                    max_size = 400
                    sosie_image.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)

                    # Convertir l'image pour Tkinter
                    sosie_photo = ImageTk.PhotoImage(sosie_image)

                    # Cr√©er un label pour afficher l'image du sosie
                    sosie_label = tk.Label(new_window, image=sosie_photo, bg=bg_color)
                    sosie_label.photo = sosie_photo  # Garder une r√©f√©rence de l'image pour √©viter qu'elle soit d√©truite
                    sosie_label.place(x=new_window.winfo_screenwidth() // 2 + 100, y=200)

                    # Ajouter le nom du sosie au-dessus de l'image
                    sosie_name_label = tk.Label(new_window, text=best_match.split('.')[0], font=("Times New Roman", 20), fg=text_color, bg=bg_color)
                    sosie_name_label.place(x=new_window.winfo_screenwidth() // 2 + 100, y=165)

                    # Cr√©er un cadre pour contenir les boutons "search", "restart" et "Analyse"
                    button_frame3 = tk.Frame(new_window, bg=bg_color)
                    button_frame3.pack(side=tk.BOTTOM, pady=10)  # Placer le cadre en bas de la page avec un peu de marge

                    # Ajouter le bouton pour rechercher le sosie sur Google
                    search_button = tk.Button(button_frame3, text="üîçRecherche", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=lambda: webbrowser.open(f"https://www.google.com/search?q={best_match.split('.')[0]}"))
                    search_button.pack(side=tk.LEFT, padx=10)  # Placer √† gauche du bouton "restart"

                    # Ajouter un bouton "Recommencer" pour r√©initialiser la fen√™tre
                    restart_button = tk.Button(button_frame3, text="üîÑRecommencer", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=lambda: open_restart_confirmation(new_window, user_name))
                    restart_button.pack(side=tk.LEFT, padx=10)  # Placer √† c√¥t√© du bouton "search"

                    # Ajouter un bouton "Analyse"
                    analyse_button = tk.Button(button_frame3, text="üìúAnalyse", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=lambda: open_analysis_window(distances, best_distance))
                    analyse_button.pack(side=tk.LEFT, padx=10)  # Placer √† c√¥t√© du bouton "restart"

                    # Ajouter le bouton "Souvenir"
                    surprise_button = tk.Button(button_frame3, text="üîÆSouvenir", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=lambda: generate_pdf(user_image_path, sosie_image_path))
                    surprise_button.pack(side=tk.LEFT, padx=10)  # Placer √† c√¥t√© du bouton "Analyse"

                    # Masquer la barre de progression
                    progress.place_forget()
                    progress_label.place_forget()
                    cancel_button.place_forget()

                    # Ajouter l'entr√©e √† l'historique
                    file_name = best_match
                    similarity_percentage = (1 - best_distance / max_distance) * 100
                    history.append(f"    {os.path.basename(user_image_path)} üíñ {best_match.split('.')[0]} üíñ {similarity_percentage:.2f}% de ressemblance")
                    save_history()

                elif search_thread_active:
                    # Arr√™ter la barre de progression
                    progress.stop()
                    # Mettre √† jour le texte de la barre de progression
                    progress_label.config(text="ü©∑Chargement termin√©ü©∑")

                    # Afficher un message si aucun sosie n'est trouv√©
                    no_sosie_label = tk.Label(new_window, text="ü©∑Aucun sosie trouv√©, changez de photoü©∑", font=("Times New Roman", 20), fg=text_color, bg=bg_color)
                    no_sosie_label.place(x=new_window.winfo_screenwidth() // 2 + 100, y=200)

                    # Masquer la barre de progression
                    progress.place_forget()
                    progress_label.place_forget()
                    cancel_button.place_forget()

            # Lancer la recherche de sosie dans un thread s√©par√©
            global search_thread
            search_thread = threading.Thread(target=search_sosie)
            search_thread.start()

            # Assurer que la recherche s'arr√™te si la fen√™tre est ferm√©e
            new_window.protocol("WM_DELETE_WINDOW", lambda: on_window_close(new_window))

    # Fonction pour ouvrir la fen√™tre de confirmation d'annulation
    def open_cancel_confirmation():
        # Cr√©er une nouvelle fen√™tre pour la confirmation
        confirmation_window = tk.Toplevel(new_window)
        confirmation_window.title("ü©∑Annuler la recherche?ü©∑")

        # Centrer la fen√™tre de confirmation
        screen_width = confirmation_window.winfo_screenwidth()
        screen_height = confirmation_window.winfo_screenheight()
        window_width = 400
        window_height = 200
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        confirmation_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        # D√©finir le fond de la fen√™tre en noir
        confirmation_window.config(bg=bg_color)

        # Ajouter un label avec la question
        label = tk.Label(confirmation_window, text="ü©∑Souhaites-tu annuler la recherche?ü©∑", font=("Times New Roman", 16), fg=text_color, bg=bg_color)
        label.pack(pady=20)

        # Cr√©er un cadre pour les boutons
        button_frame = tk.Frame(confirmation_window, bg=bg_color)
        button_frame.pack(pady=10)

        # Cr√©er les boutons "ü©∑ouiü©∑" et "ü©∑nonü©∑"
        def cancel_search():
            global search_thread_active
            search_thread_active = False
            search_thread.join(timeout=0.1)  # Attendre que le thread se termine
            confirmation_window.destroy()  # Fermer la fen√™tre de confirmation
            restart_experience(new_window, user_name)  # Revenir √† l'√©tat initial

        yes_button = tk.Button(button_frame, text="ü©∑ouiü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=cancel_search)
        yes_button.pack(side=tk.LEFT, padx=10)

        no_button = tk.Button(button_frame, text="ü©∑nonü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=confirmation_window.destroy)
        no_button.pack(side=tk.RIGHT, padx=10)

    # Fonction pour g√©rer la fermeture de la fen√™tre
    def on_window_close(new_window):
        global search_thread_active
        search_thread_active = False
        if search_thread.is_alive():
            search_thread.join(timeout=0.1)  # Attendre que le thread se termine
        new_window.destroy()  # Fermer la fen√™tre

    # Associer la fonction de validation au bouton
    validate_button.config(command=validate_photo)

    # Lancer la boucle principale de la nouvelle fen√™tre
    new_window.mainloop()

# Fonction pour red√©marrer l'exp√©rience
def restart_experience(new_window, user_name):
    global distances
    distances = []  # Vider la liste des distances √† chaque fois que l'on utilise l'option "Recommencer"
    new_window.destroy()  # Fermer la fen√™tre "Etape 2"
    create_etape2_window(user_name)  # Recr√©er la fen√™tre "Etape 2" pour recommencer

# Fonction pour ouvrir la fen√™tre de confirmation de recommencement
def open_restart_confirmation(parent_window, user_name):
    # Cr√©er une nouvelle fen√™tre pour la confirmation
    confirmation_window = tk.Toplevel(parent_window)
    confirmation_window.title("ü©∑Recommencer?ü©∑")

    # Centrer la fen√™tre de confirmation
    screen_width = confirmation_window.winfo_screenwidth()
    screen_height = confirmation_window.winfo_screenheight()
    window_width = 400
    window_height = 200
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    confirmation_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    confirmation_window.config(bg=bg_color)

    # Ajouter un label avec la question
    label = tk.Label(confirmation_window, text="Souhaites-tu recommencer?", font=("Times New Roman", 16), fg=text_color, bg=bg_color)
    label.pack(pady=20)

    # Cr√©er un cadre pour les boutons
    button_frame = tk.Frame(confirmation_window, bg=bg_color)
    button_frame.pack(pady=10)

    # Cr√©er les boutons "ü©∑ouiü©∑" et "ü©∑nonü©∑"
    yes_button = tk.Button(button_frame, text="ü©∑ouiü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=lambda: restart_experience(parent_window, user_name))
    yes_button.pack(side=tk.LEFT, padx=10)

    no_button = tk.Button(button_frame, text="ü©∑nonü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=confirmation_window.destroy)
    no_button.pack(side=tk.RIGHT, padx=10)

# Fonction pour ouvrir la fen√™tre de confirmation de retour √† l'accueil
def open_home_confirmation(parent_window):
    # Cr√©er une nouvelle fen√™tre pour la confirmation
    confirmation_window = tk.Toplevel(parent_window)
    confirmation_window.title("ü©∑Accueil?ü©∑")

    # Centrer la fen√™tre de confirmation
    screen_width = confirmation_window.winfo_screenwidth()
    screen_height = confirmation_window.winfo_screenheight()
    window_width = 400
    window_height = 200
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    confirmation_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    confirmation_window.config(bg=bg_color)

    # Ajouter un label avec la question
    label = tk.Label(confirmation_window, text="ü©∑Souhaites-tu revenir √† la page pr√©c√©dente?ü©∑", font=("Times New Roman", 16), fg=text_color, bg=bg_color)
    label.pack(pady=20)

    # Cr√©er un cadre pour les boutons
    button_frame = tk.Frame(confirmation_window, bg=bg_color)
    button_frame.pack(pady=10)

    # Cr√©er les boutons "ü©∑ouiü©∑" et "ü©∑nonü©∑"
    yes_button = tk.Button(button_frame, text="ü©∑ouiü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=lambda: go_back_to_main(parent_window, confirmation_window))
    yes_button.pack(side=tk.LEFT, padx=10)

    no_button = tk.Button(button_frame, text="ü©∑nonü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=confirmation_window.destroy)
    no_button.pack(side=tk.RIGHT, padx=10)

# Fonction pour revenir √† la page principale
def go_back_to_main(parent_window, confirmation_window):
    global search_thread_active
    search_thread_active = False
    if 'search_thread' in globals() and search_thread.is_alive():
        search_thread.join(timeout=0.1)
    confirmation_window.destroy()
    parent_window.destroy()
    create_window()

# Fonction pour afficher la fen√™tre de d√©marrage
def show_start_window():
    # Cr√©er la fen√™tre de d√©marrage
    start_window = tk.Tk()
    start_window.title("ü©∑Bienvenue dans notre app de reconnaissance faciale -Camilia et Sarahü©∑")

    # Centrer la fen√™tre de d√©marrage
    screen_width = start_window.winfo_screenwidth()
    screen_height = start_window.winfo_screenheight()
    window_width = 630
    window_height = 470
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    start_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    start_window.config(bg=bg_color)

    # Charger l'image depuis l'URL
    image_url = "https://i.pinimg.com/736x/0e/32/c5/0e32c5f7ea60766481490ceff20961d7.jpg"
    response = requests.get(image_url)
    image = Image.open(BytesIO(response.content))

    # Redimensionner l'image pour qu'elle tienne dans la fen√™tre tout en conservant les proportions
    max_size = 600
    image.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)

    # Convertir l'image pour Tkinter
    photo = ImageTk.PhotoImage(image)

    # Cr√©er un label pour afficher l'image
    image_label = tk.Label(start_window, image=photo, bg=bg_color)
    image_label.pack(pady=20)

    # Cr√©er un bouton "‚≠êSTART‚≠ê"
    start_button = tk.Button(start_window, text="‚≠êSTART‚≠ê", font=("Times New Roman", 20), fg=text_color, bg=button_color, command=lambda: open_main_window(start_window))
    start_button.pack(pady=20)

    # Lancer la boucle principale de la fen√™tre de d√©marrage
    start_window.mainloop()

# Fonction pour ouvrir la fen√™tre principale
def open_main_window(start_window):
    start_window.destroy()  # Fermer la fen√™tre de d√©marrage
    create_window()  # Ouvrir la fen√™tre principale

# Fonction pour ouvrir la fen√™tre de personnalisation
def open_customization_window():
    global new_window
    # Cr√©er la fen√™tre de personnalisation
    customization_window = tk.Toplevel()
    customization_window.title("ü©∑Personnalisationü©∑")

    # Centrer la fen√™tre de personnalisation
    screen_width = customization_window.winfo_screenwidth()
    screen_height = customization_window.winfo_screenheight()
    window_width = 400
    window_height = 400
    x = (screen_width - window_width) // 2
    y = (screen_height - window_height) // 2
    customization_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # D√©finir le fond de la fen√™tre en noir
    customization_window.config(bg=bg_color)

    # Ajouter un label pour le titre
    title_label = tk.Label(customization_window, text="Personnalisation", font=("Times New Roman", 20), fg=text_color, bg=bg_color)
    title_label.pack(pady=10)

    # Ajouter un bouton pour choisir la couleur du fond
    def choose_bg_color():
        global bg_color
        bg_color = colorchooser.askcolor(title="Choisir la couleur du fond")[1]
        apply_colors()

    bg_color_button = tk.Button(customization_window, text="ü©∑Fondsü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=choose_bg_color)
    bg_color_button.pack(pady=10)

    # Ajouter un bouton pour choisir la couleur des boutons
    def choose_button_color():
        global button_color
        button_color = colorchooser.askcolor(title="Choisir la couleur des boutons")[1]
        apply_colors()

    button_color_button = tk.Button(customization_window, text="ü©∑Boutonsü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=choose_button_color)
    button_color_button.pack(pady=10)

    # Ajouter un bouton pour choisir la couleur des √©critures
    def choose_text_color():
        global text_color
        text_color = colorchooser.askcolor(title="Choisir la couleur des √©critures")[1]
        apply_colors()

    text_color_button = tk.Button(customization_window, text="ü©∑Ecrituresü©∑", font=("Times New Roman", 16), fg=text_color, bg=button_color, command=choose_text_color)
    text_color_button.pack(pady=10)

    # Ajouter un menu d√©roulant pour s√©lectionner le th√®me
    def change_theme(theme):
        global bg_color, button_color, text_color, entry_frame_color, entry_bg_color
        if theme == "Par d√©faut":
            bg_color = "black"
            button_color = "black"
            text_color = "#4cbae7"
            entry_frame_color = "#ff82e6"
            entry_bg_color = "black"
        elif theme == "ü©∑Clairü©∑":
            bg_color = "white"
            button_color = "white"
            text_color = "black"
            entry_frame_color = "lightgrey"
            entry_bg_color = "white"
        elif theme == "ü©∑Sombreü©∑":
            bg_color = "black"
            button_color = "black"
            text_color = "white"
            entry_frame_color = "darkgrey"
            entry_bg_color = "white"
        elif theme == "ü©∑Camiliaü©∑":
            bg_color = "#d7a8f0"
            button_color = "#65208a"
            text_color = "white"
            entry_frame_color = "black"
            entry_bg_color = "black"
        elif theme == "ü©∑Sarahü©∑":
            bg_color = "#a8d7f0"
            button_color = "#52a1cc"
            text_color = "#660856"
            entry_frame_color = "black"
            entry_bg_color = "black"
        apply_colors()

    theme_label = tk.Label(customization_window, text="Th√®me", font=("Times New Roman", 16), fg=text_color, bg=bg_color)
    theme_label.pack(pady=10)

    theme_var = tk.StringVar(value="Par d√©faut")
    theme_menu = tk.OptionMenu(customization_window, theme_var, "Par d√©faut", "ü©∑Clairü©∑", "ü©∑Sombreü©∑", "ü©∑Camiliaü©∑", "ü©∑Sarahü©∑", command=change_theme)
    theme_menu.config(font=("Times New Roman", 16), fg=text_color, bg=button_color)
    theme_menu.pack(pady=10)

    # Fonction pour appliquer les couleurs s√©lectionn√©es
    def apply_colors():
        # Appliquer les couleurs √† toutes les fen√™tres
        root.config(bg=bg_color)
        for widget in root.winfo_children():
            if isinstance(widget, tk.Button):
                widget.config(fg=text_color, bg=button_color)
            elif isinstance(widget, tk.Label):
                widget.config(fg=text_color, bg=bg_color)
            elif isinstance(widget, tk.Frame):
                widget.config(bg=bg_color)
            elif isinstance(widget, tk.Entry):
                widget.config(fg=text_color, bg=entry_bg_color)
            elif isinstance(widget, tk.Toplevel):
                widget.config(bg=bg_color)
                for child in widget.winfo_children():
                    if isinstance(child, tk.Button):
                        child.config(fg=text_color, bg=button_color)
                    elif isinstance(child, tk.Label):
                        child.config(fg=text_color, bg=bg_color)
                    elif isinstance(child, tk.Frame):
                        child.config(bg=bg_color)
                    elif isinstance(child, tk.Entry):
                        child.config(fg=text_color, bg=entry_bg_color)

        # Appliquer les couleurs √† la fen√™tre de personnalisation
        customization_window.config(bg=bg_color)
        for widget in customization_window.winfo_children():
            if isinstance(widget, tk.Button):
                widget.config(fg=text_color, bg=button_color)
            elif isinstance(widget, tk.Label):
                widget.config(fg=text_color, bg=bg_color)
            elif isinstance(widget, tk.Frame):
                widget.config(bg=bg_color)
            elif isinstance(widget, tk.OptionMenu):
                widget.config(fg=text_color, bg=button_color)

        # Appliquer les couleurs √† la fen√™tre "Etape 2"
        if 'new_window' in globals():
            new_window.config(bg=bg_color)
            for widget in new_window.winfo_children():
                if isinstance(widget, tk.Button):
                    widget.config(fg=text_color, bg=button_color)
                elif isinstance(widget, tk.Label):
                    widget.config(fg=text_color, bg=bg_color)
                elif isinstance(widget, tk.Frame):
                    widget.config(bg=bg_color)
                elif isinstance(widget, tk.Entry):
                    widget.config(fg=text_color, bg=entry_bg_color)

        # Sauvegarder les pr√©f√©rences de personnalisation
        save_preferences()

    # Capturer toutes les entr√©es de l'utilisateur pour garder la fen√™tre en premier plan
    customization_window.grab_set()

    # Lancer la boucle principale de la fen√™tre de personnalisation
    customization_window.mainloop()

# Fonction pour sauvegarder l'historique
def save_history():
    with open('history.json', 'w') as f:
        json.dump(history, f)

# Fonction pour charger l'historique
def load_history():
    global history
    if os.path.exists('history.json'):
        with open('history.json', 'r') as f:
            history = json.load(f)

# Fonction pour sauvegarder les pr√©f√©rences de personnalisation
def save_preferences():
    preferences = {
        'bg_color': bg_color,
        'button_color': button_color,
        'text_color': text_color,
        'entry_frame_color': entry_frame_color,
        'entry_bg_color': entry_bg_color
    }
    with open('preferences.json', 'w') as f:
        json.dump(preferences, f)

# Fonction pour charger les pr√©f√©rences de personnalisation
def load_preferences():
    global bg_color, button_color, text_color, entry_frame_color, entry_bg_color
    if os.path.exists('preferences.json'):
        with open('preferences.json', 'r') as f:
            preferences = json.load(f)
            bg_color = preferences.get('bg_color', bg_color)
            button_color = preferences.get('button_color', button_color)
            text_color = preferences.get('text_color', text_color)
            entry_frame_color = preferences.get('entry_frame_color', entry_frame_color)
            entry_bg_color = preferences.get('entry_bg_color', entry_bg_color)

# Lancer la fonction pour cr√©er la fen√™tre initiale
if __name__ == "__main__":
    history = []  # Initialiser l'historique globalement
    search_thread_active = True  # Initialiser le drapeau pour contr√¥ler l'√©tat du thread de recherche
    bg_color = "black"
    button_color = "black"  # Changer cette ligne pour mettre la couleur des boutons en noir
    text_color = "#4cbae7"
    entry_frame_color = "#ff82e6"
    entry_bg_color = "black"
    load_history()  # Charger l'historique
    load_preferences()  # Charger les pr√©f√©rences de personnalisation
    show_start_window()  # Afficher la fen√™tre de d√©marrage
